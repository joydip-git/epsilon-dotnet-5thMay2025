cloning the repo:
1. install git
2. command: >git clone https://github.com/joydip-git/epsilon-dotnet-5thMay2025.git
------------------------------------------------------------------------

Top-level statement: new template feature, available for executable applications, where you need NOT to write the following explicitly
	a. namespace
	b. Any class inside that namespace
	c. Main method inside the class

just write the executable code directly in that file (which you were supposed to write inside Main method)

this feature can be applied in one file in an executable application and that is the root file (the file with Main method). 
this feature helps you avoid writing the boilerplate code.

------------------------------------------------------------------

CLI ( Command line interface) tool in .NET: dotnet
>dotnet --vesion
>dotnet --list-sdks

create a new application, compile and run using this tool


>dotnet new list => list of types of app that can be created

generic command to create any app using CLI tool:
>dotnet new <type-of-app> --name <app-name> -f <framework-verison>

create console app:
>dotnet new console --name FirstCLIApp -f net8.0

compile the console app:
>dotnet build <project file>
note: if you are inside the directory where the *.csproj file is present, then no need  mention the file name after "build" command

run the executable (console) app:
>dotnet run <project file>
note: if you are inside the directory where the *.csproj file is present, then no need  mention the file name after "run" command

----------------------------------------------------------------------
.NET application execution cycle:

step-1:[compilation]
---------------------------
Source Code (any language) -> compiler -> Internediate Language/Common Internediate Language (IL/CIL) Code

whichever language was used for source code, the compile anyway will produce IL code out of it and the IL code produced out of any language is same.

IL Code is a platform neutral code => it does not contain any O/S specific instructions

IL code has its own data type system
in C#, if you declare an integer variable (int x=10;), or in VB you declare an integer variable (dim x as Integer; x=10;) the same from both language will be converted to IL data type Int32 (Int32 x = 10;)
this data type system is known as CTS (Common Type System)
this CTS helps you avoid syntactical and memory conflicts also as well as provides smooth integration/interoperability of applications.

this IL code will be placed in the output file (*.dll)
the output file is also known as Assembly

Compiler => Roslyn (C# and VB)

Assembly contains not only IL code but also other artifacts.

1. Assembly Metadata or Manifest: contains information (metadata) about the entire assembly or app (such as - name, author, version number, dependent libraries of the assembly etc.)

2. Type Metadata or Metainfo: Contains information or metadata about every type (class, interface etc.) and their member information

3. Headers: 
	CLR Header: which version of runtime should be used to run this 	app. also it might contain digital signature.

	Windows Header (optional): optional 32 bit windows header
	

4. IL Code itself

to view these segments of the assembly you can use a tool: 
name: ILDASM or Intermediate Language DisAssembler
path: C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\ildasm.exe
Note: this tool was and still part of leagcy .NET framework SDKs. hence the pecuiliar path.

There are two types of application: 
	 - executable (the one with Main method in a root file): standalone
		[output file/assembly: *.dll + host app: *.exe]

	 - library (the one without Main method in any file): reusable
		[output file/assembly: *.dll (No host for this type of app)]
	   Note: this type of application is used by other libraries or executables


agenda:
 to learn about creating library (reusable component) and consume it from an executable (standalone) application

solution: LibraryDemo
	1. library type app (class library app)
		name: MessengerLibrary
		class name: Messanger
		method name: GetMessage
		access specifier: public
		purpose: return a welcome message welcoming a person
		arguments: 1
		arg name: name [name of the person]
		arg type: string
		returns: yes
		return type: string [welcome message]
	2. executable app (console app)
		name: ClientApp
		using top-level statement
	   to use Messenger class and its method from this app (Program.cs file), you have to "add reference" to the library app (project)



class best practices:
	1. class name and name of the file, containing the class, should be 
	same
	2. one class file should have one class only
	3. class name MUST be in pascal casing style and should not contain any keyword of language as suffix or prefix.
	4. class name should not contain any digit or special character as suffix or prefix or in-between
		ex: class DbUtility{}
		bad: Dbutility/dbUtility/dbutility/DbUtility1/_DbUtility etc.	
	5. class name should be singular styled (rare case plural style)
	ex: 	class DbUtility{} 
		class BankingOperations{}

	6. class name should be a noun, not a verb or an adjective
	bad => class PerformBankingOperations{}
	good => class BankingOperations{}

Method(s) of a class:
<access-specifier> <access-modifier> <return-type> <method_name>(arg1-data-type arg1-name, arg2-data-type arg2-name,.....)
{}

return type can be "void": method does not return anything
return type other than "void": method does return something and one must use "return" statement to return value from the method
a method can return only one value.

method best practices:
1. name should be written in pascal-casing:
ex: DoSomething() insteda of dosomething() or doSoemthing()
2. method name should not contain any keyword of language as suffix or prefix.
3. method name should not contain any digit or special character as suffix or prefix or in-between


expression body syntax => applicable for one-liner
used in case of class method, property, constructor etc. with single-line code

start-up project: the project or app to run out of many present in the same solution when Ctrl+F5 or F5 from VS 2022 is clicked
By default the first project added into the solution is the start-up project
you can change the start up project configuration



