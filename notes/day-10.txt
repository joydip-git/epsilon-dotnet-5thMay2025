database type: SQL Server
database name: epsilondatabase
table: products

solution: Epsilon.DotNet.PmsApp
---------------------------------------

1. data transfer object: a type/entity which is used in layered architecture to transfer data from one layer to another layer

library: Epsilon.DotNet.PmsApp.Entities
class: Product

2. data access layer:

library: Epsilon.DotNet.PmsApp.Repository
[add reference to Epsilon.DotNet.PmsApp.Entities library]

class: ProductDao
methods:
	fetches all product records from database table "products" and returns the data to the caller as collection of product objects
	List<Product> GetAll()

	fetches a single product record from database table "products" and returns the data to the caller as a product object
	Product Get(int id)

	inserts a new record into the database table for a given product object
	bool Insert(Product p)

	updates an existing record in the database table for a given product id and updated product data
	bool Update(int id, Product p)

	removes an existing record in the database table for a given product id
	bool Delete(int id)

3. unit test for repository:

project: unit test case project (MS Test)
name: Epsilon.DotNet.PmsApp.RepositoryTests
[add reference to the library Epsilon.DotNet.PmsApp.Repository]
class: ProductDaoTests
methods:
	GetAllPositiveTest()
	GetPositiveTest()

4. business layer:

library: Epsilon.DotNet.PmsApp.BusinessLogic
[add reference to Epsilon.DotNet.PmsApp.Repository library]
[add reference to Epsilon.DotNet.PmsApp.Entities library]

class: ProductBusinessComponent
methods:
	fetches all product records from data access layer and returns the data to the caller as collection of product objects but sorted
	List<Product> FetchAll(int choice)

	fetches a single product record from data access layer and returns the data to the caller as it is, but before calling the dal method, it will perform validation on the data
	Product Fetch(int id)

	pass a new record to the dal for a given product object, but it will call dal method after validating the product object (and if necessary, auto-generate the product id)
	bool Add(Product p)

	pass the updatable record to dal method, for a given product id and updated product data, but it will call dal method after validating the product object and the id
	bool Modify(int id, Product p)

	pass the id of the product to delete to the dal method after validating the id
	bool Remove(int id)

5. unit test for business layer:

project: unit test case project (MS Test)
name: Epsilon.DotNet.PmsApp.BusinessLogicTests
[add reference to the library Epsilon.DotNet.PmsApp.BusinessLogic]
class: ProductBusinessComponentTests
methods:
	FetchAllPositiveTest()
	FetchPositiveTest()


6. presentation layer:
console app: Epsilon.DotNet.PmsApp.UserInterface
[add reference to the library Epsilon.DotNet.PmsApp.Repository]
[add reference to the library Epsilon.DotNet.PmsApp.Entities]

class: top-level statement (Program.cs)


ProductDao dao = new ();
dao.GetAll();


class Person
{
	private int id;
	private DateTime dateOfBirth;
	private int age;
	public int Id
	{
		set => id=value;
		get => id;
	}
	public DateTime DateOfBirth
	{
		set
		{
			dateOfBirth = value;
			TimeSpan diff = DateTime.Now.ToString() - value;
			age = diff.Days/365;
		}
		get => dateOgBirth;
	}
}

auto-implemented/automatic property: should be used when property setter and getter does not have more than one line of code. It generates the private field behind the scene and set and get accessors will use that data member to set the value or return the value.

class Person
{
	//property setter
	public string Name { set; get; } = string.Empty;

	//no automatic property for dateOfBirth
	private DateTime dateOfBirth;
	public DateTime DateOfBirth
	{
		set
		{
			dateOfBirth = value;
			TimeSpan diff = DateTime.Now.ToString() - value;
			age = diff.Days/365;
		}
		get => dateOfBirth;
	}

	public int Id
	{
		set;
		get;
	}

	/*private int _IdField;
	public int Id
	{
		set => _IdField = value;
		get => _IdField;
	}
	*/

	public int Age {get;}
	
	/*
	private int _AgeField;
	public int Age {get => _AgeField;} 
	*/
}

unit test cases:
------------------------------
MS Test
NUnit
XUnit

MS Test
-----------------
attributes:
	TestClass => to be ued at the top of the class containig test cases
	TestMetod => to be used at the top of the unit test case method 
	ExpectedException => to be used at the top of the unit test case method in case you are testing whether the method being tested throws exception as per expectation
	TestInitialize => to be used at the top of the method in the test class to initialize some values to be used by every unit test case method. this method runs before evey unit test case method.
	TestCleanUp => to be used at the top of the method in the test class to clean up some initialized values/resources afer they have been used by every unit test case method. this method runs after evey unit test case method.
	ClassInitialize => to be used at the top of a method in the test class to initialize some values to be used by every unit test case method. this method runs only one time and that is before all the unit test case methods
	ClassCleanUp => to be used at the top of the method in the test class to clean up some initialized values/resources afer they have been used by unit test case methods. this method runs only one time after all unit test case methods.


