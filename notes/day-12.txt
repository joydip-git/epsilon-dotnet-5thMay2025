Built-in delegates:
--------------------------
Action => delegate void Action();
Action<T> => delegate void Action<in T>(T input);

Predicate<T> => delegate bool Predicate<in T>(T input);

Func<TResult> => delegate TResult Func<out TResult>();

Func<T,TResult> => delegate TResult Func<in T, out TResult>(T input);

Func<T1,T2,TResult> => delegate TResult Func<in T1,in T2, out TResult>(T1 input1,T2 input2);
......
Func<T1,T2,...,in T16,TResult> => delegate TResult Func<in T1,in T2,..in T16,out TResult>(T1 input1,T2 input2,...,T16 input16);


Comparsion<T> => delegate int Comparsion<in T>(T x, T y);

EventHandler => delegate void EventHandler(object obj, EventArgs e);

etc.

Functional Programming:
---------------------------------

LINQ => Language Integrated Query 
	a query language/tehcnique integrated into the programming language and has its foundation in OOP language features, generic, collections, delegate and anonymous method, lambda expression and functional programming etc.

write query against source of data in programming language (which is essentially a collection object)

two syntactical styles:
a. method query syntax
b. query operator syntax

method query syntax:
--------------------------
a collection is "queried" through a series of methods of the collection class itself
for this purpose every collection class in .NET offers several methods for repeatative tasks, such as: 
Where(), OrderBy(), OrderByDescending(), Select(), Group(), Join(), Max(), Min(), Average(), Take(), Find(), Any() etc.

Majority of these methods needs some kind logic to be passed in order to accomplish the task. The logic must be passed through a built-in delegate as demanded by the method.


Query Syntax
-----------------------------
a collection is "queried" through a series of operators (like clauses in SQL) and written like a SQL (in a reversed manner)

Note: we do not have different operators for every situation (method)
such as for Max(), Min(), Average() kind of aggregate methods we do not have equivalent operators in query syntax.


implicitly typed local variable:
-------------------------------------------
declaring a variable without any strict data type but using var keyword to do that.
any implcitly typed local variable must be assigned some value so that the actual data type can be understood. this mechanism is known as type inference.

var x = 10;
var y; <- error (must assign value)

class A
{
 var x; <- error
 public var Method() <- error
 public void Method(var a) <- error
}
Note: var is JUST a keyword, NOT a DATA TYPE, so do not use var as return type of data type for the aguments in method or data members of a class etc.

web application:
--------------------
backend server application which provides anyone with CRUD methods (APIs) to interact with some database table
these APIs are callable via web (using HTTP protocol)
i.e. an web application which exposes some APIs via URLs (HTTP protocol)
=> RESTful application (REpreentational State Transfer)

anyone can request the APIs exposed by a RESTful web application via HTTP protocol and its methods (GET, POST, PUT, DELETE, PATCH etc.)
HTTP protocol is state-less protocol, i.e., it can not be used to maintain either the state of request or even state of any data in the protocol
any RESTful web application will NOT just return the data, BUT the STATE of  the data to you.
the RESTful application does not store the "state" of the client at the backend.


example:
http://localhost:4200/products/filter/{name}     [GET]
this API request will generate a response with a series of product data, filtered by the name, in JSON/XML format

http://localhost:4200/products/all/sort/{choice} [GET]
this API request will generate a response with a series of product data, sorted by the choice, in JSON/XML format

http://localhost:4200/products/{id} 		 [GET]
this API request will generate a response with a product data, matching to the given id, in JSON/XML format


http://localhost:4200/products/add 		 [POST]
[additional data: product data to be added as JSON/XML through HTTP request body]
this API request will help you to add a new product data [as sent by you in JSON/XML format through request body] in the backend data source and generate a response as decieded by you

http://localhost:4200/products/edit/{id}	 [PUT]
[additional data: product data to be upadted as JSON/XML through HTTP request body]
this API request will help you to update an existing product data in the backend data source for a given product id and the updated product data [as sent by you in JSON/XML format through request body] and generate a response as decieded by you


http://localhost:4200/products/remove/{id}	 [DELETE]
this API request will help you to remove an existing product data from the backend data source for a given product id and generate a response as decieded by you



